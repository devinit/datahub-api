// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gql Types to Typescript types End to End test: should create typescript types from graphql files 1`] = `
"\\"// tslint:disable
// graphql typescript definitions

declare namespace DH {
  interface IGraphQLResponseRoot {
    data?: IQuery;
    errors?: Array<IGraphQLResponseError>;
  }

  interface IGraphQLResponseError {
    message: string;            // Required for all errors
    locations?: Array<IGraphQLResponseErrorLocation>;
    [propName: string]: any;    // 7.2.2 says 'GraphQL servers may provide additional entries to error'
  }

  interface IGraphQLResponseErrorLocation {
    line: number;
    column: number;
  }

  /*
    description: 
  */
  interface IQuery {
    getCountryProfilePageData: Array<IPage> | null;
    getGlobalPicturePageData: Array<IPage> | null;
    getGlobalPictureThemes: Array<ITheme> | null;
    getGlobalPictureIndicators: Array<IIndicator> | null;
    getOdaDonorBubbleChartPageData: Array<IPage> | null;
    getPovertyBubbleChartPageData: Array<IPage> | null;
    getSpotlightUgandaPageData: Array<IPage> | null;
    getUnbundlingOdaPageData: Array<IPage> | null;
    getUnbundlingOOfPageData: Array<IPage> | null;
    getWhereThePoorPageData: Array<IPage> | null;
    getRevenuePerPersonAndPoverty190: Array<IRevenuePerPersonAndPoverty190> | null;
    getBubbleSize: Array<IBubbleSize> | null;
    getOverViewTab: OverViewTab | null;
    getPovertyTab: IPovertyTab | null;
    getPopulationTab: IPopulationTab | null;
    getGovernmentFinance: IGovernmentFinance | null;
    getInternationalResources: IInternationalResources | null;
    getSingleResource: Array<ISingleResourceData> | null;
    getMapData: IMapData | null;
    getMethodologies: Array<IDataSources> | null;
    getWhereThePoorWillbeData: IWhereThePoorWillbe | null;
    getUnbundlingAid: Array<IUnbundlingAid> | null;
  }

  /*
    description: 
  */
  interface IPage {
    id: string | null;
    title: string | null;
    narrative: string | null;
  }

  /*
    description: 
  */
  interface ITheme {
    id: string | null;
    name: string | null;
    default: string | null;
    order: number | null;
  }

  /*
    description: 
  */
  interface IIndicator {
    id: string | null;
    name: string | null;
    order: number | null;
  }

  /*
    description: 
  */
  interface IRevenuePerPersonAndPoverty190 {
    id: string | null;
    year: number | null;
    poverty: number | null;
    revenuePerPerson: number | null;
  }

  /*
    description: 
  */
  interface IBubbleSize {
    id: string | null;
    year: number | null;
    value: number | null;
  }

  /*
    description: 
  */
  type OverViewTab = IOverViewTabRecipients | IOverViewTabDonors;



  /*
    description: 
  */
  interface IOverViewTabRecipients {
    poorestPeople: string | null;
    population: string | null;
    domesticPublicResources: string | null;
    internationalResources: string | null;
    governmentSpendPerPerson: string | null;
  }

  /*
    description: 
  */
  interface IOverViewTabDonors {
    governmentSpendPerPerson: string | null;
    averageIncomerPerPerson: Array<IIndicatorData> | null;
    incomeDistTrend: Array<IQuintile> | null;
  }

  /*
    description: 
  */
  interface IIndicatorData {
    year: number | null;
    Value: number | null;
    id: string | null;
  }

  /*
    description: 
  */
  interface IQuintile {
    value: number | null;
    quintileName: string | null;
  }

  /*
    description: 
  */
  interface IPovertyTab {
    poverty190Trend: Array<IIndicatorData> | null;
    depthOfExtremePoverty: number | null;
    incomeDistTrend: Array<IQuintile> | null;
  }

  /*
    description: 
  */
  interface IPopulationTab {
    population: string | null;
    populationDistribution: Array<IPopulationDistribution> | null;
    populationPerAgeBand: Array<IPopulationPerAgeBand> | null;
  }

  /*
    description: 
  */
  interface IPopulationDistribution {
    group: string | null;
    value: number | null;
    year: number | null;
  }

  /*
    description: 
  */
  interface IPopulationPerAgeBand {
    band: string | null;
    value: number | null;
    year: number | null;
  }

  /*
    description: 
  */
  interface IGovernmentFinance {
    totalRevenue: string | null;
    totalGrants: number | null;
    spendingAllocation: Array<IIndicatorDataColored> | null;
    currencyCode: string | null;
    revenueAndGrants: Array<IDomestic> | null;
    expenditure: Array<IDomestic> | null;
    financing: Array<IDomestic> | null;
  }

  /*
    description: 
  */
  interface IIndicatorDataColored {
    year: number | null;
    Value: number | null;
    id: string | null;
    color: string | null;
  }

  /*
    description: 
  */
  interface IDomestic {
    name: string | null;
    levels: Array<string> | null;
    budgetType: string | null;
    year: number | null;
    value: number | null;
  }

  /*
    description: 
  */
  interface IInternationalResources {
    GNI: number | null;
    netODAOfGNI: number | null;
    resourcesOverTime: Array<IResourceData> | null;
    mixOfResources: Array<IMixOfResourcesData> | null;
    inflows: Array<IFlow> | null;
    outflows: Array<IFlow> | null;
  }

  /*
    description: 
  */
  interface IResourceData {
    year: number;
    value: number;
    name: string;
    flowCategory: string | null;
    flowType: string | null;
    direction: string | null;
    percentage: number | null;
    color: string | null;
  }

  /*
    description: 
  */
  interface IMixOfResourcesData {
    value: number | null;
    name: string | null;
  }

  /*
    description: 
  */
  interface IFlow {
    name: string | null;
    id: string | null;
    selections: Array<IFlowSelection> | null;
  }

  /*
    description: 
  */
  interface IFlowSelection {
    name: string | null;
    id: string | null;
  }

  /*
    description: 
  */
  interface ISingleResourceData {
    resources: Array<IResourceData> | null;
    total: string | null;
  }

  /*
    description: 
  */
  interface IMapData {
    map: Array<IMapUnit> | null;
    name: string | null;
    uomDisplay: string | null;
    uom: string | null;
    startYear: number | null;
    endYear: number | null;
    description: string | null;
    theme: string | null;
    color: string | null;
    total: number | null;
  }

  /*
    description: 
  */
  interface IMapUnit {
    id: string | null;
    countryName: string | null;
    year: number | null;
    value: number | null;
  }

  /*
    description: 
  */
  interface IDataSources {
    name: string | null;
    Description: string | null;
    methodology: string | null;
    unit: string | null;
    source: string | null;
    download: IDownload | null;
  }

  /*
    description: 
  */
  interface IDownload {
    csv: string | null;
    zip: string | null;
  }

  /*
    description: 
  */
  interface IWhereThePoorWillbe {
    global: Array<ILevelData> | null;
    regional: Array<ILevelData> | null;
  }

  /*
    description: 
  */
  interface ILevelData {
    poverty: number | null;
    scenario: string | null;
    year: number | null;
    typeName: string | null;
  }

  /*
    description: 
  */
  type IAidTypesEnum = 'ODA' | 'OOF';

  /*
    description: 
  */
  interface IUnbundlingAid {
    aids: Array<IAid> | null;
    total: number | null;
    toCountries: Array<string> | null;
    fromCountries: Array<string> | null;
    channels: Array<string> | null;
    form: Array<string> | null;
  }

  /*
    description: 
  */
  interface IAid {
    year: number | null;
    Value: number | null;
    id: string | null;
  }

  /*
    description: 
  */
  interface IGovtRevenuePerPerson {
    id: string | null;
    year: number | null;
    value: number | null;
    type: string | null;
  }

  /*
    description: 
  */
  interface IPoverty190 {
    id: string | null;
    year: number | null;
    value: number | null;
  }
}

// tslint:enable
\\""
`;

exports[`gql Types to Typescript types should return merged typedefs 1`] = `
"\\"schema {
  query: Query
}

type Query {
  getCountryProfilePageData(countrySlug: String!): [Page]
  getGlobalPicturePageData: [Page]
  getGlobalPictureThemes: [Theme]
  getGlobalPictureIndicators(theme: String!): [Indicator]
  getOdaDonorBubbleChartPageData: [Page]
  getPovertyBubbleChartPageData: [Page]
  getSpotlightUgandaPageData: [Page]
  getUnbundlingOdaPageData: [Page]
  getUnbundlingOOfPageData: [Page]
  getWhereThePoorPageData: [Page]
  getRevenuePerPersonAndPoverty190: [revenuePerPersonAndPoverty190]
  getBubbleSize(year: Int!, indicatorOrCountry: String): [BubbleSize]
  getOverViewTab(id: String!): OverViewTab
  getPovertyTab(id: String!): PovertyTab
  getPopulationTab(id: String!): PopulationTab
  getGovernmentFinance(id: String!): GovernmentFinance
  getInternationalResources(id: String!): InternationalResources
  # for area tree map chart dropdown selectoion
  getSingleResource(id: String!, direction: String): [SingleResourceData]
  getMapData(id: String!, DACOnly: Boolean): MapData
  getMethodologies: [DataSources]
  getWhereThePoorWillbeData: WhereThePoorWillbe
  getUnbundlingAid(type: AidTypes, year: Int!, toCountry: String, fromCountryOrOrg: String, sector: String, inTheformOf: String, channel: String): [UnbundlingAid]
}

type Theme {
  id: String
  name: String
  default: String
  order: Int
}

type Indicator {
  id: String
  name: String
  order: Int
}

type Page {
  id: String
  title: String
  narrative: String
}

type GovtRevenuePerPerson {
  # id country code
  id: String
  year: Int
  value: Int
  # actual or budgeted in our case we use actual values
  type: String
}

type Poverty190 {
  id: String
  year: Int
  value: Int
}

type BubbleSize {
  # Indicator label
  id: String
  year: Int
  value: Int
}

type revenuePerPersonAndPoverty190 {
  id: String
  year: Int
  poverty: Int
  revenuePerPerson: Int
}

type IndicatorData {
  year: Int
  Value: Float
  id: String
}

type IndicatorDataColored {
  year: Int
  Value: Float
  id: String
  color: String
}

type Quintile {
  value: Float
  quintileName: String
}

type ResourceData {
  year: Int!
  value: Float!
  name: String!
  # Category i.e FDI, ODA
  flowCategory: String
  # flow either inflow or outflow
  flowType: String
  # in or out
  direction: String
  # percentage of the total 
  percentage: Int
  color: String
}

type MixOfResourcesData {
  value: Int
  name: String
}

type OverViewTabRecipients {
  # how many of the poorest people globally live in a country
  poorestPeople: String
  # total population for a given country
  population: String
  domesticPublicResources: String
  internationalResources: String
  # recipient countries $PPP
  governmentSpendPerPerson: String
}

type OverViewTabDonors {
  governmentSpendPerPerson: String
  # donor: gross nation income per capit GNI
  averageIncomerPerPerson: [IndicatorData]
  # donor: Income share by quintile
  incomeDistTrend: [Quintile]
}

union OverViewTab = OverViewTabRecipients | OverViewTabDonors

type PovertyTab {
  # Poverty reduction over time area chart trend
  poverty190Trend: [IndicatorData]
  # how deep is poverty %
  depthOfExtremePoverty: Int
  # Recipients: how income is distributed, % of income received by each quintil
  incomeDistTrend: [Quintile]
}

type PopulationDistribution {
  group: String
  value: Int
  year: Int
}

type PopulationPerAgeBand {
  band: String
  value: Int
  year: Int
}

type PopulationTab {
  # total population in a country
  population: String
  # Urban vs Rural population level
  populationDistribution: [PopulationDistribution]
  # Number of people in 3 age bands (65+, 15- 65, 0 - 14)
  populationPerAgeBand: [PopulationPerAgeBand]
}

type Domestic {
  # eg value added tax
  name: String
  # the levels of the data i.e total-expenditure,recurrent-expenditure,compensation-of-employees
  levels: [String]
  # eg Actual or budget
  budgetType: String
  # if level 1 data comes first, 
   # this is for the tree map and its a convenience field as it can be drived from the levels array
   # so one may query levels or level 
  year: Int
  value: Float
}

type GovernmentFinance {
  # Total revenue for a particular year if not available return -1 
  totalRevenue: String
  totalGrants: Int
  # for donut chart
  spendingAllocation: [IndicatorDataColored]
  # such as constant 2015 USD for tree map
  currencyCode: String
  # for treemap
  revenueAndGrants: [Domestic]
  expenditure: [Domestic]
  financing: [Domestic]
}

type FlowSelection {
  name: String
  id: String
}

type Flow {
  name: String
  id: String
  selections: [FlowSelection]
}

type InternationalResources {
  # Gross National Income
  GNI: Int
  # Net ODA received, % of GNI for recipient countries
  netODAOfGNI: Int
  # for sidebar chart in international resources section & area partition tree chart default data
   # & line chart in the  tabs section
  resourcesOverTime: [ResourceData]
  # Whats the mix of resources can be for donors (out flows) or receipient (in flows)
   # this is for the donut chart
  mixOfResources: [MixOfResourcesData]
  # an array of inflows for a particular country, for area & partition chart
  inflows: [Flow]
  # an array of outflows for a particular country
  outflows: [Flow]
}

type SingleResourceData {
  resources: [ResourceData]
  # in dollars
  total: String
}

type MapUnit {
  # country code Id in DW this is di_id
  id: String
  # countryName derived from entity.csv
  countryName: String
  year: Int
  value: Float
}

type MapData {
  map: [MapUnit]
  # map indicator user friendly label / slug eg Poverty
  name: String
  # map value unit eg US $ or %
  uomDisplay: String
  uom: String
  startYear: Int
  endYear: Int
  description: String
  theme: String
  color: String
  # map indicators total for % computations where needed
  total: Float
}

type Download {
  csv: String
  zip: String
}

type DataSources {
  # name of the data you inquiring about
  name: String
  Description: String
  methodology: String
  unit: String
  source: String
  download: Download
}

type LevelData {
  # extreme poverty count 
  poverty: Int
  # can be worst case, baseline or bestcase
  scenario: String
  year: Int
  # typeName can be global or regional
  typeName: String
}

type WhereThePoorWillbe {
  global: [LevelData]
  regional: [LevelData]
}

enum AidTypes {
  ODA
  OOF
}

type Aid {
  year: Int
  Value: Int
  # country or organisation label
  id: String
}

type UnbundlingAid {
  aids: [Aid]
  total: Int
  # unbundling aid selection options
  toCountries: [String]
  fromCountries: [String]
  channels: [String]
  form: [String]
}
\\""
`;
